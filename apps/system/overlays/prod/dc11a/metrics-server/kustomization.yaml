apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# Base resources
resources:
  - ../../../../base/metrics-server
  - network-policy.yaml

# Common labels
commonLabels:
  app.kubernetes.io/component: metrics
  app.kubernetes.io/part-of: kube-system

# Production-specific patches
patches:
  # Replicas and update strategy
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: replace
        path: /spec/replicas
        value: 3
      - op: replace
        path: /spec/strategy
        value:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
            maxSurge: 1

  # Node affinity and anti-affinity
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: add
        path: /spec/template/spec/affinity
        value:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/worker
                  operator: In
                  values: ["true"]
                - key: kubernetes.io/arch
                  operator: In
                  values: ["amd64"]
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values: ["metrics-server"]
                topologyKey: kubernetes.io/hostname

  # Resource requests and limits
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: replace
        path: /spec/template/spec/containers/0/resources
        value:
          requests:
            cpu: 200m
            memory: 400Mi
          limits:
            cpu: 500m
            memory: 1Gi

  # Security context
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: add
        path: /spec/template/spec/securityContext
        value:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          seccompProfile:
            type: RuntimeDefault
      - op: add
        path: /spec/template/spec/containers/0/securityContext
        value:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault

  # Pod disruption budget
  - target:
      kind: PodDisruptionBudget
      name: metrics-server
    patch: |-
      - op: replace
        path: /spec/minAvailable
        value: 2

  # Service account and RBAC
  - target:
      kind: ServiceAccount
      name: metrics-server
    patch: |-
      - op: add
        path: /metadata/annotations
        value:
          "eks.amazonaws.com/role-arn": "arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(CLUSTER_NAME)-metrics-server"
          "automountServiceAccountToken": "true"

  # Pod topology spread constraints
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: add
        path: /spec/template/spec/topologySpreadConstraints
        value:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfied: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: metrics-server
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfied: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: metrics-server

  # Pod labels and annotations
  - target:
      kind: Deployment
      name: metrics-server
    patch: |-
      - op: add
        path: /spec/template/metadata/labels/priority-class
        value: system-cluster-critical
      - op: add
        path: /spec/template/metadata/annotations
        value:
          prometheus.io/scrape: "true"
          prometheus.io/port: "4443"
          prometheus.io/scheme: "https"
          prometheus.io/path: "/metrics"

# Configuration for the metrics-server service
configMapGenerator:
  - name: metrics-server-config
    literals:
      - NODE_LABELS=kubernetes.io/role=worker,node-role.kubernetes.io/worker=true
      - KUBELET_PREFERRED_ADDRESS_TYPES=InternalIP,ExternalIP,Hostname
      - METRIC_RESOLUTION=15s
      - REQUEST_HEADER_ALLOWED_NAMES=front-proxy-client
      - REQUEST_HEADER_EXTRA_HEADERS_PREFIX=X-Remote-Extra-
      - REQUEST_HEADER_GROUP_HEADERS=X-Remote-Group
      - REQUEST_HEADER_USERNAME_HEADERS=X-Remote-User

# Network policy for metrics-server
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/part-of: kube-system
spec:
  podSelector:
    matchLabels:
      k8s-app: metrics-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow metrics scraping from kube-system and monitoring namespaces
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 443
  egress:
  # Allow all egress traffic
  - {}
