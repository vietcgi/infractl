# High Availability Configuration
replicas: 2

# Resource requests and limits
resources:
  requests:
    cpu: 100m
    memory: 200Mi
  limits:
    cpu: 250m
    memory: 400Mi

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault

# Container Security Context
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault

# Command line arguments
args:
  - --cert-dir=/tmp
  - --secure-port=4443
  - --kubelet-insecure-tls  # Required for RKE2/K3s
  - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP
  - --kubelet-use-node-status-port
  - --metric-resolution=15s
  - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  - --tls-min-version=VersionTLS12
  - --requestheader-allowed-names=front-proxy-client
  - --requestheader-extra-headers-prefix=X-Remote-Extra-
  - --requestheader-group-headers=X-Remote-Group
  - --requestheader-username-headers=X-Remote-User

# Service configuration
service:
  port: 443
  type: ClusterIP
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4443"
    prometheus.io/scheme: "https"

# Liveness probe
livenessProbe:
  enabled: true
  httpGet:
    path: /livez
    port: 4443
    scheme: HTTPS
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

# Readiness probe
readinessProbe:
  enabled: true
  httpGet:
    path: /readyz
    port: 4443
    scheme: HTTPS
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3

# Metrics configuration for Prometheus
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
    scheme: https
    tlsConfig:
      insecureSkipVerify: true  # Required for self-signed certs
    additionalLabels:
      release: prometheus
      app.kubernetes.io/component: metrics

# Node selection and tolerations
nodeSelector:
  kubernetes.io/os: linux
  node-role.kubernetes.io/control-plane: "true"

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300
  - key: "node.kubernetes.io/unreachable"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300

# Priority class
priorityClassName: system-cluster-critical

# Pod disruption budget for HA
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: 1

# Horizontal pod autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 80

# Pod topology spread constraints
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfied: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: metrics-server
  - maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfied: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: metrics-server

# Pod affinity
podAffinityPreset: ""  # hard/soft/off
podAntiAffinityPreset: "hard"  # hard/soft/off

# Network policy
networkPolicy:
  enabled: true
  allowEgress: true
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 10250
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Service account
serviceAccount:
  create: true
  name: metrics-server
  annotations: {}
  automountServiceAccountToken: true

# RBAC configuration
rbac:
  create: true
  apiVersion: v1
  extraRules: []
  extraClusterRoleRules:
    - apiGroups: ["authentication.k8s.io"]
      resources: ["tokenreviews"]
      verbs: ["create"]
    - apiGroups: ["authorization.k8s.io"]
      resources: ["subjectaccessreviews"]
      verbs: ["create"]

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "4443"
  prometheus.io/scheme: "https"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels:
  app.kubernetes.io/component: metrics
  app.kubernetes.io/part-of: kube-system
  app.kubernetes.io/version: v0.6.4  # Match your metrics-server version

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 0
